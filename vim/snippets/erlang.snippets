# eunit
snippet eunit
	-module(${1:`Filename('', 'my')`}).
	-include_lib("eunit/include/eunit.hrl").
	
	${2}_test() ->
		${3}
# gen_server
snippet gen_srv
	-module(`Filename('', 'my')`).
	-behavior(gen_server).

	-export([start_link/0, stop/0]).
	-export([init/1, terminate/2, handle_call/3, handle_cast/2, code_change/3, handle_info/2]).
	
	%%
	%% Client API
	%%

	start_link() ->
		gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

	stop() ->
		gen_server:cast(?MODULE, stop).

	%%
	%% Callback Functions
	%%

	init([${1}]) ->
		${2}
		{ok, nil}.
	
	terminate(_Reason, _LoopData) ->
		ok.

	handle_info(_Info, LoopData) ->
		{noreply, LoopData}.

	code_change(_OldVsn, LoopData, _Extra) ->
		{ok, LoopData}.

	handle_call(_Msg, _From, LoopData) ->
		{reply, ok, LoopData}.

	handle_cast(stop, LoopData) ->
		{stop, normal, LoopData};
	handle_cast(_Msg, LoopData) ->
		{noreply, LoopData}.
# gen_event
snippet gen_event
	-module(`Filename('', 'my')`).

	-behaviour(gen_event).

	-export([add_handler/0, delete_handler/0]).

	-export([init/1, handle_event/2, handle_call/2,
					 handle_info/2, code_change/3, terminate/2]).

	add_handler() ->
		${1}:add_handler(?MODULE, []).

	delete_handler(GamePID) ->
		${2:$1}:delete_handler(?MODULE, []).

	init([]) ->
		{ok, []}.

	handle_event(Msg, State) ->
		error_logger:info_report(Msg),
		{ok, State}.

	handle_call(_Request, State) -> 
		{ok, ok, State}.

	handle_info(_Info, State) ->
		{ok, State}.

	terminate(_Arg, _State) -> 
		ok.

	code_change(_OldVsn, State, _Extra) -> 
		{ok, State}.
# supervisor
snippet sup
	-module(`Filename('', 'my')`).
	-behavior(supervisor).

	-export([start_link/0]).
	-export([init/1]).

	start_link() ->
		supervisor:start_link({local, ?MODULE}, ?MODULE, []).

	init([]) ->
		{ok, {{one_for_one, 1, 1}, [
			{${1}, {${2}, start_link, []}, permanent, 1000, worker, []}
		]}}.
# logger && debugger
snippet log
	?LOG([{${1}, ${2}}]),
snippet debug
	?DEBUG([{${1}, ${2}}]),
snippet cast
	handle_cast(${1}, LoopData) ->
		${2}
		{noreply, LoopData};
snippet call
	handle_call(${1}, _From, LoopData) ->
		${2}
		{reply, ok, LoopData};
